{
    "document_type": "book",
    "title": "Laws of UX",
    "author": "Jon  Yablonski;",
    "source": "raw_syllabi\\master_courses\\Human_computer_interaction\\pdf_material\\Laws of UX.pdf",
    "date_published": "2020-04-21",
    "keywords": "Unavailable",
    "flag": "",
    "text": "Postel’s Law Be conservative in what you do, be liberal in what you accept from others. Key Takeaways • Be empathetic to, flexible about, and tolerant of any of the various actions the user could take or any input they might provide. • Anticipate virtually anything in terms of input, access, and capabil- ity while providing a reliable and accessible interface. • The more we can anticipate and plan for in design, the more resil- ient the design will be. • Accept variable input from users, translating that input to meet your requirements, defining boundaries for input, and providing clear feedback to the user. Overview Designing good user experiences means designing good human experiences. People don’t behave like machines: we are sometimes inconsistent, frequently distracted, occasionally error-prone, and usually driven by emotion. We expect the products and services we interact with to intuitively understand us and be for- giving. We expect to feel in control at all times, and we’re generally annoyed when asked to provide more information than is necessary. At the same time, the devices and software we use vary greatly in terms of feature support, capabilities, and form factors. To be capable of meeting users’ expectations, the products and 43 \n1 Jon Postel, “RFC 793: Transmission Control Protocol,” September 1981, https://www.rfc-editor.org/rfc/ rfc793 . services designers build must be robust and adaptable. Postel’s law, also known as the robustness principle, gives us a guiding principle for designing human- centric experiences that account for both scale and complexity. The first half of Postel’s law states that you should “be conservative in what you do.” In the context of design this can be interpreted as stipulating that the output of our efforts, whether that’s an interface or a comprehensive system, should be reliable and accessible. These are important characteristics of a digital product or service, because not only must the interface be easy to use, but it must be easy to use for the largest spectrum of users possible. This means that anyone, regardless of device size, feature support, input mechanism, assistive technology, or even connection speed, should be served something that works. The second half of the principle states that you should “be liberal in what you accept from others.” In the context of design, this can be taken to mean the acceptance of input from users via any input mechanism and in a variety of pos- sible formats. It applies to data entered into a form via mouse and keyboard (or perhaps keyboard only), assistive technology, touch and gesture input from mobile users, and even voice input in all its variations of language, dialect, and nomenclature. It applies to screens of any size and resolution, from a watch interface all the way up to a TV. It encompasses differences in network band- width, connection strength, and any other possible variation. In this chapter, we’ll take a close look at some examples of Postel’s law in action and how designers can leverage this principle to design products and serv- ices that adapt to how people actually are. Origins Jon Postel was an American computer scientist who made significant contribu- tions to the underlying protocols that would come to form the internet. One of these contributions was an early implementation of the Transmission Control Protocol (TCP), the foundation on which data is sent and received over a net- work. In this specification Postel introduced what he called the robustness princi- ple , which stated that “TCP implementations will follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.” 1 The idea was that programs that send data (either to other machines or to different programs on the same machine) should conform to specifications, \nwhile programs that receive data should be robust enough to accept and parse nonconformant input, as long as the meaning is clear. Postel’s principle was originally intended to be a guideline for network engi- neering, specifically in regard to the transfer of data across computer networks. The fault tolerance introduced by the robustness principle helped to ensure nodes on the early internet could communicate reliably, but its influence extends beyond just computer network engineering—software architecture has also been influenced by this principle. Take, for example, declarative languages such as HTML and CSS. Their loose error handling means that problems like authoring mistakes or lack of browser support for specific features are handled gracefully by the browser. If the browser doesn’t understand something, it simply ignores it and moves on. This has lent an amazing amount of flexibility to these lan- guages—flexibility that led to their dominance on the internet stage. The philosophy outlined in Postel’s law can also be applied to user experi- ence design and how we deal with user input and system output. As I mentioned earlier, designing good user experiences means designing good human experien- ces. Since humans and computers communicate and process information in fun- damentally different ways, it’s the responsibility of design to bridge the communication gap. Let’s take a look at some examples to see how this can be done. Examples Postel’s law describes an approach to design that’s more akin to the philosophy of human–computer interaction: we should anticipate virtually anything in terms of input, access, and capability while providing a reliable and accessible interface. There are countless examples that demonstrate this philosophical approach, but we’ll begin with one that is ubiquitous in the digital world: input forms. Forms have long been a primary means for people to provide information to systems in the digital space. In essence, they are the medium through which humans and systems interact: a product or service requires information, and the user provides that information by way of form elements that are submitted for processing. Using Postel’s law as a guide in regard to forms, the first consideration is to be conservative in how much information you ask people to provide. The more fields you require users to fill out, the more cognitive energy and effort you’re asking of them, which can lead to a deterioration in the quality of the decisions made (commonly referred to as decision fatigue ) and reduce the likelihood that they’ll complete the form. By asking only for what’s absolutely necessary and not \n2 Ethan Marcotte, “Responsive Web Design,” A List Apart, May 25, 2010, https://alistapart.com/article/ responsive-web-design . requesting information you already have, such as an email address or a pass- word, you can minimize the effort required to fill out a form. There’s also the consideration of how flexible the system is with respect to user input. Since humans and computers communicate in different ways, there’s sometimes a disconnect between the information that humans provide and the information that the computer expects. Postel’s law dictates that computers should be robust enough to accept varying types of human input and not only make sense of it but also process it into a computer-readable format. This can be done in a variety of ways, but perhaps most exciting are the ones that require the least amount of effort. Take, for example, Apple’s Face ID ( Figure 5-1 ), a facial recognition system that enables Apple users to authenticate on their mobile devi- ces without the need to provide a username or a password each time they attempt to unlock their devices. Figure 5-1. Face ID lets you securely unlock your iPhone or iPad, authenticate purchases, sign in to apps, and more (source: Apple, 2020) Next, let’s look at an example that has become ubiquitous in the post-desktop era of computing: responsive design . Over the past few decades, as more and more devices gained the ability to connect to the web, the need to serve content that could adapt to any screen size increased. Ethan Marcotte introduced an approach in 2010 that he called “responsive web design,” which relies on “fluid grids, flexi- ble images, and media queries” 2 to create websites that allow content to respond in a fluid manner to different viewing contexts. It was a completely new approach to designing and building websites, at a time when the predominant strategy was to create separate websites for desktops and internet-capable mobile devices. \nResponsive web design pushed designers beyond creating device-specific experi- ences and toward an approach that embraced the fluid nature of the web. The growing capability of Cascading Style Sheets (CSS) enabled designers to define how content could flexibly adapt to any viewing context, be it an internet-capable smartwatch, smartphone, gaming console, laptop, desktop computer, or TV ( Figure 5-2 ). Today responsive web design is the de facto standard when creating web experiences, and it embodies the philosophy of accepting a broad spectrum of input while providing output that is reliably adaptable and not quarantined to specific dimensions or devices. Figure 5-2. Responsive web design embraces the fluid nature of the web Progressive enhancement , which describes a strategy for web design focusing on content and gradual layering of styling and interaction, can also be considered an example of Postel’s law. First introduced by Steve Champeon and Nick Finck at SXSW in 2003 in a presentation titled “Inclusive Web Design For the Future” , this strategy emphasizes access to the basic content and functionality for all users, regardless of browser feature support, device features and capabilities, or internet connection speed. Additional style and interaction layers are progres- sively added as feature support and capabilities are detected, ensuring that people with newer browsers, more advanced devices, or faster connections receive a more enhanced experience without obscuring the core content. It’s an approach that stands in contrast to a previous strategy known as “graceful degradation,” which places emphasis on fault tolerance and focuses first on the more advanced software and hardware while providing a fallback for others. \nProgressive enhancement’s strength centers around its ability to liberally accept any range of browser feature support, any level of device capability sup- port, and any connection speed and to conservatively layer enhancements while preserving the core content, thus enabling universal access for everyone. Take, for example, a simple search box, which provides the ability for anyone to select it and enter a search query but is enhanced to support voice input for devices that support voice recognition ( Figure 5-3 ). Everyone will get a default search box ini- tially, and it will be usable by everyone, including those using assistive technol- ogy such as screen readers. If voice recognition support is detected, a layer of functional enhancement is added by allowing the user to select the microphone icon to invoke a voice assistant that will transcribe speech to text, thereby extend- ing the input methods of the search box without taking away from its core functionality. Figure 5-3. A progressively enhanced search component that provides a search box by default, and then voice support for devices that support voice recognition Examples of Postel’s law aren’t limited to interfaces—they can also be found in our processes. Take, for example, design systems, which are collections of reusable components and patterns guided by standards that define how they are used. The goal of a design system is to enable these components and patterns to be assembled to build any number of applications and to provide a framework for ensuring the extensibility of designs. These tools have proven incredibly valuable, enabling companies to scale design in a consistent manner across the organiza- tion ( Figure 5-4 ). To create an effective design system, organizations must be lib- eral in terms of what is accepted: everything from design, content, and code to strategy, opinions, and criticism may be provided by a diverse team of contribu- tors. In contrast, the output of the design system is conservative: guidelines, components, patterns, and principles must all be clear and purposeful. \nFigure 5-4. Design systems have enabled design to scale in a manageable and consistent manner within a number of well-known companies—pictured here, from left to right, are Carbon Design System by IBM, Lightning Design System by Salesforce, and Polaris by Shopify (source: IBM, Salesforce, Shopify, 2020) KEY CONSIDERATION Design Resiliency The input that users provide to a system is variable and may span a wide spectrum. Therefore, to ensure a better user experience, we should design systems that are liberal in their acceptance of input. However, this also means there is an increased opportunity for things to go wrong, or to at least result in a less than ideal user experience. The more we can anticipate and plan for in design, the more resilient the design will be. Take, for example, the topic of internationalization. The same text string can span different lengths, depending on the language. Many designers plan only for their native language, while not accounting for text expansion in other languages that could result in a considerable increase in length. English, a very compact language, contains words that can expand up to 300% when translated into a less compact language such as Italian ( Figure 5-5 ). Text orientation can also vary per region of the world—from left-to-right in many Western countries to right-to-left or even vertical in others. By designing with these variations in mind, we can create more robust designs that can adapt to varying text string lengths and text orientations. \nFigure 5-5. Text expansion from English (left) to Italian (right) (source: w3.org ) Another example is the default font size, which the user can custom- ize both on mobile devices and in browsers. The purpose of this feature is to give the user control over the display, typically by increasing the size of all text throughout an application or website and thereby improving its accessibility. However, this can cause problems in designs that don’t account for the possibility of the text size increasing—specifically, how it affects layout and the space available for text. Adaptable designs account for this feature and have a graceful response. Take, for example, Amazon, which does a great job of responding to font size customization in its website header navigation ( Figure 5-6 ). The design accounts for the possibility of minimum font size customization by organizing the quick links below the search bar by importance and removing the links of lesser importance as the font size increases. Figure 5-6. Amazon.com adapting to minimum font size customization (source: Amazon, 2019) \nConclusion Postel’s law can help us bridge the gap between human and machine. By design- ing systems that liberally accept variable human input and translate it into a structured, machine-friendly output, we transfer this burden away from users and therefore ensure a more human user experience. This allows us to build the products and services that are robust and adaptable to fit the needs of growing scale and complexity. While it also means there is an increased opportunity for things to go wrong, we can anticipate and plan for this in design and thus ensure our work is more resilient."
}
{
    "document_type": "book",
    "title": "Laws of UX",
    "author": "Jon  Yablonski;",
    "source": "raw_syllabi\\master_courses\\Human_computer_interaction\\pdf_material\\Laws of UX.pdf",
    "date_published": "2020-04-21",
    "keywords": "Unavailable",
    "flag": "",
    "text": "Tesler’s Law Tesler’s law, also known as the law of conservation of complexity, states that for any system there is a certain amount of complexity that cannot be reduced. Key Takeaways • All processes have a core of complexity that cannot be designed away and therefore must be assumed by either the system or the user. • Ensure as much as possible of the  burden is lifted from users by dealing with inherent complexity during design and development. • Take care not to simplify interfaces to the point of abstraction. Overview Who should bear the burden of complexity within an application or a process— the user, or the designers and developers? This is a fundamental question when considering the design of user interfaces and, more broadly, how humans inter- act with technology. A key objective for designers is to reduce complexity for the people that use the products and services we help to build, yet there is some inherent complexity in every process. Inevitably we reach a point at which com- plexity cannot be reduced any further but only transferred from one place to another. At this point, it finds its way either into the user interface or into the processes and workflows of designers and developers. 87 \nOrigins The origins of Tesler’s law can be traced back to the mid-1980s, when Larry Tes- ler, a computer scientist at Xerox PARC, was helping to develop the language of interaction design—a set of principles, standards, and best practices for defining the structure and behavior of interactive systems that was key to the development of the desktop and desktop publishing. Tesler observed that the way users inter- acted with an application was just as important as the application itself. It was important, therefore, to reduce the complexity of both the application and the user interface. However, Tesler realized that within any application or process, there is an inherent amount of complexity that cannot be removed or hidden. This complexity needs to be dealt with in one of two places: development (and, by extension, design) or user interaction. Examples One common way to illustrate Tesler’s law is through the humble email. When you write an email, there are two required pieces of information: who the mes- sage is from (you), and to whom it should be sent. The email cannot be sent if either of these is missing, and therefore it’s a necessary complexity. To reduce this complexity, a modern email client will do two things: prepopulate the sender (it can do this because it is aware of your email address), and provide suggestions for the recipient as you begin to type their address, based on prior emails and/or your contacts ( Figure 9-1 ). The complexity isn’t entirely gone; it’s just abstracted away to reduce the effort required of the user. In other words, the experience of writing an email is made a little simpler by moving the complexity of filling in the sender’s and, if possible, the recipient’s address to the email client, which was designed and developed by a team that assumed that burden of complexity when building it. \nFigure 9-1. Modern email clients reduce complexity by populating the “from” line and suggesting the “to” line based on prior emails (source: Gmail, 2019) Taking that a step further, Gmail now leverages artificial intelligence (AI) within your emails through a feature called Smart Compose ( Figure 9-2 ). This intelligent feature can scan what you’ve typed and use that content to suggest words and phrases to finish your sentences, thus saving you additional typing and time. It should be noted that Smart Compose is not the first time-saving fea- ture introduced to Gmail by way of AI—there’s also Smart Reply , which scans an email for context and suggests several relevant quick reply options. \nFigure 9-2. Example of Gmail’s Smart Compose feature (source: Gmail, 2019) Another place that Tesler’s law can commonly be observed is in the ubiqui- tous checkout process found on online shopping sites. Purchasing items online requires customers to provide lots of repetitive information, including billing and shipping details. To simplify this process for customers, it is common to see online stores enable users to have their shipping address inherit the information from their billing address ( Figure 9-3 ). This option simplifies the checkout pro- cess for customers in many cases, because it prevents them from having to enter duplicate information for shipping. The resulting experience for customers has been effectively simplified, while the complexity required to enable the feature has shifted to the designers and developers responsible for implementing it up front. Simplifying the checkout process even further are services such as Apple Pay ( Figure 9-4 ), which makes paying for items both online and in person even eas- ier for customers. Once they’ve set up an account, people using Apple Pay or similar payment services can purchase items simply by selecting the option dur- ing checkout and verifying the details of their purchase—no need to enter any additional information. The customer experience thus becomes significantly less \ncomplex, with the complexity again shifted to the designers and developers responsible for the service. Figure 9-3. The ability to inherit a shipping address from billing details within an ecommerce checkout simplifies the process and removes the need to type redundant information Figure 9-4. Apple Pay makes the checkout process as easy as selecting the payment option and verifying your purchase (source: Apple, 2019) \nRetail is an area where you can find many innovative ways to abstract com- plexity away from users. Take, for example, Amazon’s Go stores ( Figure 9-5 ), which provide a checkout-free shopping experience. First appearing as an experi- ment in downtown Seattle, they are now popping up in major metropolitan areas all over the United States. With the Amazon Go app installed on their smart- phone, a customer can simply check in with the app, grab what they need, and walk out, without ever needing to wait in line, scan their items, or even pay in the store. A little later, the customer receives a receipt, and their Amazon account is charged. Figure 9-5. The first Amazon Go store in Seattle (source: Wikipedia, 2019; photographer, Brianc333a) The dizzying array of technology involved in a checkout-free shopping expe- rience like that found in Amazon Go stores is nothing short of astounding. Advanced technology like machine learning, computer vision, and AI must be deeply integrated to allow for people to simply walk into the store, grab the items they wish to purchase, and then walk out. While the friction of shopping is dras- tically reduced for customers, the complexity that comes along with it must be absorbed by the designers and developers responsible for ensuring it all works. \nKEY CONSIDERATION When Simplicity Turns to Abstraction An important goal for designers is to eliminate unnecessary complexity for the users of the products and services they design—to become ele- gant simplifiers. After all, good user experiences are often those that feel easy and intuitive, and where obstructions that might deter people from achieving their goals are removed. But there is a balance that must be struck when striving for simplicity, and it’s important not to take it too far. When an interface has been simplified to the point of abstraction, there is no longer enough information available for users to make informed decisions. In other words, the amount of visual information pre- sented has been reduced in order to make the interface seem less com- plex, but this has led to a lack of sufficient cues to help guide people through a process or to the information they need. Take, for example, iconography. Icons can help simplify an interface by providing an alternative way to communicate visual information that takes up less space than text labels, but they can also lead to ambiguity ( Figure 9-6 ). This is especially true when icons are not accompanied by text labels and are therefore left to interpretation. With a few exceptions, icons seldom hold universal meaning—they can mean different things to different people. To add to the ambiguity, icons that are associated with certain actions don’t always perform the same action from one interface to the next. When iconography is used and does not convey clear mean- ing or perform a consistent action, it becomes visual noise and an obsta- cle to completing tasks. Figure 9-6. Iconography can sometimes mean different things to different people \nConclusion Tesler’s law is important for designers to be aware of because it relates to a fun- damental challenge we face throughout our work: how we manage complexity. We must first acknowledge that with any process there will be a necessary amount of complexity that cannot be removed, no matter how simplified the pro- cess becomes as a result of the design process. Everything from a humble email to a highly sophisticated checkout process will have inherent complexity that must be managed. As designers, we have a responsibility to remove inherent complexity from our interfaces, or else we ship that complexity to our users. This can result in confusion, frustration, and a bad user experience. Where possible, designers and developers should handle complexity, while taking care not to oversimplify to the point of abstraction."
}
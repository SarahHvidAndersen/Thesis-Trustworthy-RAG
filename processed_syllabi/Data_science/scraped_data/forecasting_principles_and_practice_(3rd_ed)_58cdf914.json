{
    "document_type": "online_article",
    "title": "Forecasting: Principles and Practice (3rd ed)",
    "author": "Rob J Hyndman, George Athanasopoulos",
    "source": "https://otexts.com/fpp3/stl.html",
    "date_published": "23 March 2025",
    "flag": "",
    "text": "STL is a versatile and robust method for decomposing time series. STL is an acronym for âSeasonal and Trend decomposition using Loessâ, while loess is a method for estimating nonlinear relationships. The STL method was developed byR. B. Cleveland et al. (1990), and later extended to handle multiple seasonal patterns byBandara et al. (2022). STL has several advantages over classical decomposition, and the SEATS and X-11 methods: On the other hand, STL has some disadvantages. In particular, it does not handle trading day or calendar variation automatically, and it only provides facilities for additive decompositions. A multiplicative decomposition can be obtained by first taking logs of the data, then back-transforming the components. Decompositions that are between additive and multiplicative can be obtained using a Box-Cox transformation of the data with\\(0<\\lambda<1\\). A value of\\(\\lambda=0\\)gives a multiplicative decomposition while\\(\\lambda=1\\)gives an additive decomposition. The best way to begin learning how to use STL is to see some examples and experiment with the settings. Figure3.7showed an example of an STL decomposition applied to the total US retail employment series. Figure3.18shows an alternative STL decomposition where the trend-cycle is more flexible, the seasonal pattern is fixed, and the robust option has been used. Figure 3.18: Total US retail employment (top) and its three additive components obtained from a robust STL decomposition with flexible trend-cycle and fixed seasonality. The two main parameters to be chosen when using STL are the trend-cycle windowtrend(window = ?)and the seasonal windowseason(window = ?). These control how rapidly the trend-cycle and seasonal components can change. Smaller values allow for more rapid changes. Both trend and seasonal windows should be odd numbers; trend window is the number of consecutive observations to be used when estimating the trend-cycle; season window is the number of consecutive years to be used in estimating each value in the seasonal component. Setting the seasonal window to be infinite is equivalent to forcing the seasonal component to be periodicseason(window='periodic')(i.e., identical across years). This was the case in Figure3.18. By default, theSTL()function provides a convenient automated STL decomposition using a seasonal window ofseason(window=11)when there is a single seasonal period, and the trend window chosen automatically from the seasonal period. The default setting for monthly data istrend(window=21). For multiple seasonal periods, the default seasonal windows are 11, 15, 19, etc., with larger windows corresponding to larger seasonal periods. This usually gives a good balance between overfitting the seasonality and allowing it to slowly change over time. But, as with any automated procedure, the default settings will need adjusting for some time series. In the example shown in Figure3.7, the default trend window setting produces a trend-cycle component that is too rigid. As a result, signal from the 2008 global financial crisis has leaked into the remainder component, as can be seen in the bottom panel of Figure3.7. Selecting a shorter trend window as in Figure3.18improves this."
}